import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import Button from '@mui/material/Button'
import Card from '@mui/material/Card'
import { createTheme } from '@mui/material/styles'
import styles from '../styles/Home.module.css'
import { withTheme } from '@emotion/react'


export default function Stack() {
  return (
    <div className={styles.container}>
      <Head>
        <title> Data Structures</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
      <Link href="/">
        <h1 className={styles.title}>
          ✨ queue ✨
        </h1>
        </Link>
        <Link href="/">
          <p className={styles.subtitle}> First-In-First-Out Collection of Data</p>
        </Link>
        <div className={styles.column}>
            <Card className={styles.card}>
                <h2>Intro to Queues</h2>
                <p>A <b>queue</b> is a <b>First-In-First-Out (FIFO)</b> array.  Elements are <b>added add the "back"</b> and <b>removed at the "front"</b> of the queue.</p>
                <p>Queue functions include <b>enqueue</b> (add item), <b>dequeue</b> (remove item), <b>peek</b> (see front item), and <b>isEmpty</b> (returns true or false).</p>
                <p>In both Python and C++, we create a "queue" class which instantiates a queue object as a list (Python) or array (C++).</p>
                <p>You may also be interested in its LIFO equivalent, the Stack: <Link href="/stack"><Button className={styles.button}>Stack</Button></Link></p>
            </Card>
              <h2>Implementation</h2>
              <div className={styles.row}>
                <Card className={styles.card}>
                  <h2>Python</h2>
                  <p>Python queues are instantiated as <b>lists</b>.</p>
                  <p>The constructor method <b>__init__(self)</b> creates an empty list called "items".</p>
                  <p> We can enqueue a new element at the back (index 0) using Python's <b>insert (index, item) </b> list method.</p>
                  <p> We can dequeue the front element using Python's <b>pop ( ) </b> list method.</p>
                  <p> We can peek by simply returning the front (last) element of the list (index -1). </p>
                  <p> We can check if the list is empty by comparing it to an empty list.</p>
                  <br />
                  <div className={styles.code}>
                    <h2>queue.py</h2>
                    <pre>
                      <code>
                        <p>class Queue:</p><br/>
                        <p>     def __init__(self):</p>
                        <p>          self.items = [] </p>
                        <br />
                        <p>     def enqueue(self, element): </p>
                        <p>          self.items.insert(0, element)</p>
                        <br />
                        <p>     def dequeue(self): </p>
                        <p>          self.items.pop() </p> 
                        <br />
                        <p>     def peek(self): </p>
                        <p>          return self.items[-1]</p>
                        <br />
                        <p>     def isEmpty(self): </p>
                        <p>          return self.items == [] </p>
                      </code>
                    </pre>
                  </div>
                </Card>
                <Card className={styles.card}>
                  <h2>C++</h2>
                  <p>C++ queues are instantiated as <b>arrays</b>.</p>
                  <p>Proper C++ architecture separates the class and methods into header (.h) and implementation (.cpp) files.</p>
                  <p>We use the <b>integer "front"</b> to represent the <b>index of the front element</b> (-1 if the queue is empty). </p>
                  <p>To make room to enqueue (at index 0), we use a loop to <b>shift all elements forward</b> one place.</p>
                  <p>We specify the maximum elements of the array with QUEUESIZE.</p>
                <div className={styles.row}>
                  <div className={styles.code}>
                    <h2>queue.h</h2>
                    <pre>
                      <code>
                        <p>#ifndef QUEUE_HEADER_FILE</p>
                        <p>#define QUEUE_HEADER_FILE</p>
                        <p>#define QUEUESIZE 10</p>
                        <br />
                        <p>class Queue {"{"}</p>
                        <p>     private:</p>
                        <p>           int top;</p>
                        <p>           int intqueue[QUEUESIZE];</p>
                        <p>     public:</p>
                        <p>           Stack();</p>
                        <p>           ~Stack();</p>
                        <p>           bool enqueue(int);</p>
                        <p>           int dequeue();</p>
                        <p>           int peek();</p>
                        <p>           bool isEmpty();</p>
                        <p>{"}"}</p>
                        <br />
                        <p>#endif //QUEUE_HEADER_FILE</p>
                      </code>
                    </pre>
                    </div>
                    <div className={styles.code}>
                    <h2>stack.cpp</h2>
                    <pre>
                      <code>
                        <p>#include queue.h</p>
                        <p>#include {"<iostream>"}</p>
                        <br />
                        <p>Queue::Queue( ) {"{"}</p>
                        <p>     int front = -1;</p>
                        <p>{"}"}   </p>  
                        <br/>
                        <p>Queue::~Queue( ) {"{"}</p>
                        <p>{"}"}   </p>  
                        <br/>
                        <p>Queue::bool enqueue(int i) {"{"}</p>
                        <p>      bool enqueued = false;</p>
                        <p>      if (front {"< QUEUESIZE"}) {"{"}</p>
                        <p>           intqueue[0] = i;</p>
                        <p>           front++;</p>
                        <p>           enqueued = true;</p>
                        <p></p>
                        <p>       {"}"}</p>
                        <p>      else {"{"}</p>
                        <p>           std::cout {"<<"} "Queue overflow!";</p>
                        <p>       {"}"}</p>
                        <p>      return enqueued;</p>
                        <p>{"}"}   </p>  
                        <br/>
                        <p>Queue::int dequeue( ) {"{"}</p>
                        <p>      if (front {">"} -1) {"{"}</p>
                        <p>           return intqueue[front];</p>
                        <p>           front--;</p>
                        <p>      {"}"}</p>
                        <p>      else {"{"}</p>
                        <p>           std::cout {"<<"} "Queue empty!";</p>
                        <p>       {"}"}</p>
                        <p>{"}"}   </p>  
                        <br/>
                        <p>Queue::int peek( ) {"{"}</p>
                        <p>      if (front {">"} -1) {"{"}</p>
                        <p>         return intqueue[front];</p>
                        <p>       {"}"}</p>
                        <p>      else {"{"}</p>
                        <p>           std::cout {"<<"} "Queue empty!";</p>
                        <p>       {"}"}</p>
                        <p>{"}"}   </p>  
                        <br/>
                        <p>Queue::bool isEmpty( ) {"{"}</p>
                        <p>     return (front == -1);</p>
                        <p>{"}"}   </p>  
                        <br/>
                      </code>
                    </pre>
                    </div>
                  </div>
                </Card>
              </div>
        </div>
      </main>

      <footer className={styles.footer}>
        <p>powered by the tears of CS students</p>
      </footer>
    </div>
  )
}
