import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import Button from '@mui/material/Button'
import Card from '@mui/material/Card'
import { createTheme } from '@mui/material/styles'
import styles from '../styles/Home.module.css'
import { withTheme } from '@emotion/react'


export default function Tree() {
  return (
    <div className={styles.container}>
      <Head>
        <title> Data Structures</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
      <Link href="/">
        <h1 className={styles.title}>
          ✨ tree ✨
        </h1>
        </Link>
        <Link href="/">
          <p className={styles.subtitle}> a heirarchy of node data</p>
        </Link>
        <div className={styles.row}>
            <Card className={styles.card}>
                <h2>Intro to Trees</h2>
                <p>A <b>tree</b> uses <b>nodes</b> with data and pointers like a linked list.</p>
                <p>The <b>root node</b> is the first node in the tree (like the LL's head node).</p>
                <p>A <b>parent node</b> points to <b>child nodes</b> (this is called a <b>subtree</b>).</p>
                <p>The <b>height</b> of a tree means how many levels of parent and child nodes there are.</p>
                <p>Common variations include the "binary tree" and "red-black tree".</p>
            </Card>
        </div>

        <h2>Implementation</h2>
              <div className={styles.row}>
                <Card className={styles.card}>
                  <h2>Python</h2>
                  <p>First we create a Node class.  Each list node will be object of this class.</p>
                  <p>Each Node object has <b>data (self.data)</b> and a <b>pointer (self.next)</b> to the next node.</p>
                  <p>Getter methods include getData( ) and getNext( ).</p>
                  <p>Setter methods include setData( ) and setNext( ).</p><br />
                  <p>We create the Linked List class with a <b>head node</b> (the first node).</p>
                  <p>An empty Linked List's head will point to None; we use this for isEmpty ( ).</p>
                  <p>Otherwise the head will point to the next node, letting us traverse the list.</p>
                  <p>(List traversal lets us count the number of nodes by incrementing a counter.)</p>
                  <div className={styles.code}>
                    <h2>linkedlist.py</h2>
                    <pre>
                      <code>
                        <p>class Node:</p><br/>
                        <p>     def __init__(self, initialdata):</p>
                        <p>          self.data = initialdata </p>
                        <p>          self.leftChild = None</p>
                        <p>          self.rightChild = None</p><br />
                        <br />
                        <p>class LinkedList:</p><br />
                        <p>     def __init__(self):</p>
                        <p>           self.head = None</p><br />
                        <p>     def isEmpty(self):</p>
                        <p>           return self.head == None</p><br />
                        <p>     def addNode(self, newnodedata):</p>
                        <p>            newnode = Node(newnodedata)</p>
                        <p>            newnode.setNext(self.head)</p>
                        <p>            self.head = newnode</p><br/>
                        <p>     def deleteNode(self, givendata):</p>
                        <p>             currentnode = self.head</p>
                        <p>             while currentnode.data != givendata:</p>
                        <p>                   currentnode = currentnode.getNext()</p><br/>
                        <p>     def size(self):</p>
                        <p>           counter = 0</p>
                        <p>           currentnode = self.head</p>
                        <p>           while currentnode != None:</p>
                        <p>                 counter = counter + 1</p>
                        <p>                 currentnode = currentnode.getNext()</p>
                        <p>           return counter</p><br/>
                        <p>      def search(self, givendata):</p>
                        <p>           currentnode = self.head</p>
                        <p>           while currentnode.data != None:</p>
                        <p>               if currentnode.data == givendata:</p>
                        <p>                   return currentnode</p>
                        <p>               else:</p>
                        <p>                    currentnode = currentnode.getNext()</p>
                      </code>
                    </pre>
                  </div>
                </Card>
                <Card className={styles.card}>
                  <h2>C++</h2>
                  <p>First we create the <b>Node struct</b> which holds <b>data</b> (of type integer) and a <b>pointer</b> (*next) to the next node.</p>
                  <p>(We could also implement the Node as a class, but we'll use a struct for simplicity.)</p>
                  <p>In an empty linked list, our head node's pointer will point to <b>NULL</b>.</p><br />
                  <p>Second we create the <b>Linked List class</b> to instantiate and use our Node structs.</p>
                <div className={styles.row}>
                  <div className={styles.code}>
                    <h2>node.h</h2>
                    <pre>
                      <code>
                        <p>#ifndef NODE_HEADER_FILE</p>
                        <p>#define NODE_HEADER_FILE</p>
                        <br />
                        <p>struct Node {"{"}</p>
                        <p>     int data;</p>
                        <p>     Node *next = NULL;</p>
                        <p>{"}"}</p>
                        <br />
                        <p>#endif //NODE_HEADER_FILE</p>
                      </code>
                    </pre>
                    </div>
                    <div className={styles.code}>
                    <h2>linkedlist.h</h2>
                    <pre>
                      <code>
                        <p>#ifndef LINKEDLIST_HEADER_FILE</p>
                        <p>#define LINKEDLIST_HEADER_FILE</p>
                        <p>#include "node.h"</p>
                        <br />
                        <p>class LinkedList {"{"}</p>
                        <p>     struct Node *head = NULL;</p>
                        <p>{"}"}</p>
                        <br />
                        <p>#endif //LINKEDLIST_HEADER_FILE</p>
                      </code>
                    </pre>
                    </div>
                    <div className={styles.code}>
                    <h2>linkedlist.cpp</h2>
                    <pre>
                      <code>
                        <p>#include linkedlist.h</p>
                        <p>#include {"<iostream>"}</p>
                        <br />
                        <p>Stack::Stack( ) {"{"}</p>
                        <p>     int top = -1;</p>
                        <p>{"}"}   </p>  
                        <br/>
                        <p>Stack::~Stack( ) {"{"}</p>
                        <p>{"}"}   </p>  
                        <br/>
                        <p>Stack::bool push(int i) {"{"}</p>
                        <p>      bool pushed = false;</p>
                        <p>      if (top {"< STACKSIZE"}) {"{"}</p>
                        <p>           intstack[top++] = i;</p>
                        <p>           pushed = true;</p>
                        <p></p>
                        <p>       {"}"}</p>
                        <p>      else {"{"}</p>
                        <p>           std::cout {"<<"} "Stack overflow!";</p>
                        <p>       {"}"}</p>
                        <p>      return pushed;</p>
                        <p>{"}"}   </p>  
                        <br/>
                        <p>Stack::int pop( ) {"{"}</p>
                        <p>      if (top {">"} -1) {"{"}</p>
                        <p>           return intstack[top];</p>
                        <p>           top--;</p>
                        <p>      {"}"}</p>
                        <p>      else {"{"}</p>
                        <p>           std::cout {"<<"} "Stack empty!";</p>
                        <p>       {"}"}</p>
                        <p>{"}"}   </p>  
                        <br/>
                        <p>Stack::int peek( ) {"{"}</p>
                        <p>      if (top {">"} -1) {"{"}</p>
                        <p>         return intstack[top];</p>
                        <p>       {"}"}</p>
                        <p>      else {"{"}</p>
                        <p>           std::cout {"<<"} "Stack empty!";</p>
                        <p>       {"}"}</p>
                        <p>{"}"}   </p>  
                        <br/>
                        <p>Stack::bool isEmpty( ) {"{"}</p>
                        <p>     return (top == -1);</p>
                        <p>{"}"}   </p>  
                        <br/>
                      </code>
                    </pre>
                    </div>
                  </div>
                </Card>
              </div>
      </main>

      <footer className={styles.footer}>
        <p>powered by the tears of CS students</p>
      </footer>
    </div>
  )
}
