import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import Button from '@mui/material/Button'
import Card from '@mui/material/Card'
import { createTheme } from '@mui/material/styles'
import styles from '../styles/Home.module.css'
import { withTheme } from '@emotion/react'


export default function Stack() {
  return (
    <div className={styles.container}>
      <Head>
        <title> Data Structures</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
      <Link href="/">
        <h1 className={styles.title}>
          ✨ hash table ✨
        </h1>
        </Link>
        <Link href="/">
          <p className={styles.subtitle}> Keys and Values</p>
        </Link>
        <div className={styles.column}>
            <Card className={styles.card}>
                <h2>Intro to Hash Tables</h2>
                <p>A <b>hash table</b> is a collection of <b>keys</b> and <b>values</b>.</p><br/>
                <p>We use a <b>hash function</b> to calculate a <b>hash value</b> (the value's index or <b>"slot"</b> in the table).</p>
                <p>The most common <b>hash function</b> is <b> value % sizeOfTable</b>.</p><br/>
                <p>An import aspect of hash tables is <b>collision</b> (when two values have the same hash value).</p>
                <p>We solve collision with <b>chaining</b> (pointing to the next value) or <b>open addressing</b> (finding the next empty slot).</p>
            </Card>
              <h2>Implementation</h2>
              <div className={styles.row}>
                <Card className={styles.card}>
                  <h2>Python</h2>
                  <p>Python hash tables are implemented as <b>dictionaries</b>.</p>
                  <div className={styles.code}>
                    <h2>hashtable.py</h2>
                    <pre>
                      <code>
                        <p>class Node:</p><br/>
                        <p>     def __init__(self, initialdata):</p>
                        <p>          self.data = initialdata </p>
                        <p>          self.next = None</p><br />
                        <p>     def getData(self):</p>
                        <p>           return self.data</p><br />
                        <p>     def getNext(self):</p>
                        <p>           return self.next</p><br/>
                        <p>     def setData(self, newdata):</p>
                        <p>           self.data = newdata</p><br />
                        <p>     def setNext(self, newnext):</p>
                        <p>           self.next = newnext</p>
                      </code>
                    </pre>
                  </div>
                </Card>
                <Card className={styles.card}>
                  <h2>C++</h2>
                  <p>C++ hash tables are implemented as an <b>array of pointers to values</b>.</p>
                <div className={styles.row}>
                  <div className={styles.code}>
                    <h2>node.h</h2>
                    <pre>
                      <code>
                        <p>#ifndef NODE_HEADER_FILE</p>
                        <p>#define NODE_HEADER_FILE</p>
                        <br />
                        <p>struct Node {"{"}</p>
                        <p>     int data;</p>
                        <p>     Node *next = NULL;</p>
                        <p>{"}"}</p>
                        <br />
                        <p>#endif //NODE_HEADER_FILE</p>
                      </code>
                    </pre>
                    </div>
                    <div className={styles.code}>
                    <h2>linkedlist.h</h2>
                    <pre>
                      <code>
                        <p>#ifndef LINKEDLIST_HEADER_FILE</p>
                        <p>#define LINKEDLIST_HEADER_FILE</p>
                        <p>#include "node.h"</p>
                        <br />
                        <p>class LinkedList {"{"}</p>
                        <p>     struct Node *head = NULL;</p>
                        <p>{"}"}</p>
                        <br />
                        <p>#endif //LINKEDLIST_HEADER_FILE</p>
                      </code>
                    </pre>
                    </div>
                    <div className={styles.code}>
                    <h2>linkedlist.cpp</h2>
                    <pre>
                      <code>
                        <p>#include linkedlist.h</p>
                        <p>#include {"<iostream>"}</p>
                        <br />
                        <p>Stack::Stack( ) {"{"}</p>
                        <p>     int top = -1;</p>
                        <p>{"}"}   </p>  
                        <br/>
                        <p>Stack::~Stack( ) {"{"}</p>
                        <p>{"}"}   </p>  
                        <br/>
                        <p>Stack::bool push(int i) {"{"}</p>
                        <p>      bool pushed = false;</p>
                        <p>      if (top {"< STACKSIZE"}) {"{"}</p>
                        <p>           intstack[top++] = i;</p>
                        <p>           pushed = true;</p>
                        <p></p>
                        <p>       {"}"}</p>
                        <p>      else {"{"}</p>
                        <p>           std::cout {"<<"} "Stack overflow!";</p>
                        <p>       {"}"}</p>
                        <p>      return pushed;</p>
                        <p>{"}"}   </p>  
                        <br/>
                        <p>Stack::int pop( ) {"{"}</p>
                        <p>      if (top {">"} -1) {"{"}</p>
                        <p>           return intstack[top];</p>
                        <p>           top--;</p>
                        <p>      {"}"}</p>
                        <p>      else {"{"}</p>
                        <p>           std::cout {"<<"} "Stack empty!";</p>
                        <p>       {"}"}</p>
                        <p>{"}"}   </p>  
                        <br/>
                        <p>Stack::int peek( ) {"{"}</p>
                        <p>      if (top {">"} -1) {"{"}</p>
                        <p>         return intstack[top];</p>
                        <p>       {"}"}</p>
                        <p>      else {"{"}</p>
                        <p>           std::cout {"<<"} "Stack empty!";</p>
                        <p>       {"}"}</p>
                        <p>{"}"}   </p>  
                        <br/>
                        <p>Stack::bool isEmpty( ) {"{"}</p>
                        <p>     return (top == -1);</p>
                        <p>{"}"}   </p>  
                        <br/>
                      </code>
                    </pre>
                    </div>
                  </div>
                </Card>
              </div>
        </div>
      </main>

      <footer className={styles.footer}>
        <p>powered by the tears of CS students</p>
      </footer>
    </div>
  )
}
